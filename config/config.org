#+TITLE: Personal Emacs Configuration
#+AUTHOR: Gil Tomás

* Notes
Adapted from the config.org files available [[https://github.com/danielmai/.emacs.d/blob/master/config.org][here]] and [[https://github.com/nasseralkmim/.emacs.d/blob/master/config.org][here]].

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is a
fantastic way to manage package configurations. This [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][post]] explain how it works.

This [[http://emacs.stackexchange.com/questions/10396/difference-between-init-and-config-in-use-package][Question]] is useful to understand the differences between init and config.
Basically, bind and init are evaluated immediately after start up which
contributes to startup time, config is deferred until the pacakge is loaded (by
a bind key or a specific mode).

* Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Gil Tomás"
      user-mail-address "gil.tms@gmail.com")
#+END_SRC

* Loading config.org

Using the method described [[http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/][here]].

*** Package management
#+BEGIN_SRC emacs-lisp
(package-initialize nil)
(setq package-enable-at-startup nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;; Set up package
;; initalize all ELPA packages
(require 'package)
(setq package-enable-at-startup nil
      package-archives
      '(("melpa"        . "http://melpa.org/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")
        ("RSW-packages" . "http://www.plasmas.biz/rswe/")))
#+END_SRC
*** use-package

See [http://github.com/jwiegley/use-package/]
or http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html

Basic syntax:

#+BEGIN_EXAMPLE
(use-package package-name
         [:keyword [option]]...)

:init          Code to run before PACKAGE-NAME has been loaded.
:config        Code to run after PACKAGE-NAME has been loaded.  Note that if
                           loading is deferred for any reason, this code does not execute
                           until the lazy load has occurred.
:preface       Code to be run before everything except `:disabled'; this can
                           be used to define functions for use in `:if', or that should be
                           seen by the byte-compiler.
:mode          Form to be added to `auto-mode-alist'.
:interpreter   Form to be added to `interpreter-mode-alist'.
:commands      Define autoloads for commands that will be defined by the
                           package.  This is useful if the package is being lazily loaded,
                           and you wish to conditionally call functions in your `:init'
                           block that are defined in the package.
:bind          Bind keys, and define autoloads for the bound commands.
:bind*         Bind keys, and define autoloads for the bound commands,
                           *overriding all minor mode bindings*.
:bind-keymap   Bind a key prefix to an auto-loaded keymap defined in the
                           package.  This is like `:bind', but for keymaps.
:bind-keymap*  Like `:bind-keymap', but overrides all minor mode bindings
:defer         Defer loading of a package -- this is implied when using
                           `:commands', `:bind', `:bind*', `:mode' or `:interpreter'.
                           This can be an integer, to force loading after N seconds of
                           idle time, if the package has not already been loaded.
:after         Defer loading of a package until after any of the named
                           features are loaded.
:demand        Prevent deferred loading in all cases.
:if EXPR       Initialize and load only if EXPR evaluates to a non-nil value.
:disabled      The package is ignored completely if this keyword is present.
:defines       Declare certain variables to silence the byte-compiler.
:functions     Declare certain functions to silence the byte-compiler.
:load-path     Add to the `load-path' before attempting to load the package.
:diminish      Support for diminish.el (if installed).
:ensure        Loads the package using package.el if necessary.
:pin           Pin the package to an archive.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)
                                        ;(setq use-package-verbose t)
#+END_SRC

* Custom settings
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el"
                                    prelude-user-init-file))
(load custom-file)
#+END_SRC

* Global Key Bindings
#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC

* Prelude Hacks
#+BEGIN_SRC emacs-lisp
;; cancels prelude-ui.el instruction to render the fringe (gutter) smaller
;; the argument is a width in pixels (the default is 8)
(if (fboundp 'fringe-mode)
    (fringe-mode 8))
;; proced was replaced by vkill on prelude: disable vkill instead
;; 29Jul2014
(put 'vkill 'disabled t)
;; rebinds C-- and C-+ to negative and positive arguments respectively,
;; overriding code on prelude-global-keybindings.el (previously bound to
;; text-scale-increase/decrease)
;; 03Aug2015
(global-set-key (kbd "C--") 'negative-argument)
(global-set-key (kbd "C-+") 'positive-argument)
#+END_SRC

* Font

Download

| [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]     |
| [[https://www.fontsquirrel.com/fonts/download/dejavu-sans][Dejavu Sans]]         |
| [[https://fontlibrary.org/pt/font/fantasque-sans-mono][Fantasque Sans mono]] |
| [[http://leonardo-m.livejournal.com/77079.html][Inconsolata g]]       |

#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "darwin")
    (set-frame-font "Source Code Pro 14")
  (set-frame-font "Source Code Pro 13"))
;; (set-frame-font "Source Code Pro 14")
;; (set-frame-font "Monospace 10")
;; (set-frame-font "Dejavu Sans 10")
;; (set-frame-font "Fantasque Sans Mono 11")
;; (set-frame-font "Inconsolata-g 10")
#+END_SRC

* Common defaults

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+BEGIN_SRC emacs-lisp
;; These functions are useful.  Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; UTF-8 please
(set-language-environment "UTF-8")
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq default-buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; from Sacha page
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
(setq-default indent-tabs-mode nil)

(setq uniquify-buffer-name-style 'forward)

;; Don't beep at me
(setq visible-bell t)

;; the following is copied from my previous personal.el
;; 21Sep2014
;; toggles delete-selection-mode on
(delete-selection-mode 1)
;; toggles display-time mode on
(setq display-time-day-and-date t)
(display-time)
;; removes all scroll bars
(scroll-bar-mode -1)
;; configures emacs so that word moving commands will move cursor into
;; between CamelCaseWords
(global-subword-mode 1)
;; sets set-mark-command-repeat-pop to TRUE
;; non-nil means repeating C-SPC after popping mark pops it again
(setq set-mark-command-repeat-pop t)
;; defines variable dired-listing-switches
(setq dired-listing-switches "-alh")
;; defines variable orgstruct-heading-prefix-regexp
(defvar orgstruct-heading-prefix-regexp)
(setq orgstruct-heading-prefix-regexp "## ")
;; The right margin is determined by the variable fill-column.  The default
;; value for fill-column is 70; here we set it to 80.  21Sep2016
(setq-default fill-column 80)
#+END_SRC

Here we make page-break characters look pretty, instead of appearing
as =^L= in Emacs. [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][Here's an informative article called "Using
Page-Breaks in GNU Emacs" by Eric J. M. Ritz.]]

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t)
#+END_SRC

These are configurations relative to ibuffer coming from my previous presonal.el
file:

#+BEGIN_SRC emacs-lisp
;; see http://www.emacswiki.org/emacs/IbufferMode
;; 30Jul2014
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)))
#+END_SRC

* Org mode
** Org itself
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :mode (("\\.org$" . org-mode))
  :bind(("C-c a" . org-agenda)
        ("C-c l" . org-store-link)
        ("C-c c" . org-capture))
  :config
  (add-hook 'org-mode-hook 'smartparens-mode)
  ;; (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    ;; (setq org-ellipsis " …")
    (setq org-bullets-bullet-list '("•")))

  ;; beamer export
  ;; (eval-after-load "org"
  ;;   '(require 'ox-beamer))

  ;; (use-package ox-reveal :ensure ox-reveal
  ;;   :config
  ;;   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;;   (setq org-reveal-mathjax t))

  ;; For code fragments typesetting
  ;; http://orgmode.org/worg/org-tutorials/org-latex-preview.html
  ;; (setq org-latex-listings 'minted)
  ;; (require 'ox-latex)
  ;; code highlight for latex org export
  ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; add a nice font to org latex export
  ;; (add-to-list 'org-latex-packages-alist '("" "libertine"))

  ;; preview latex in org mode with imagemagick
  ;; (setq org-latex-create-formula-image-program 'imagemagick)

  ;; Org babel and source blocks
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-export-babel-evaluate nil
        org-confirm-babel-evaluate nil) ; doesn't ask for confirmation

  ;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  ;; This is for remove the annoying background color on the headings, level 1
  ;; and level 2, when using the material-theme.
  (custom-set-faces
   '(org-level-1 ((t (:background nil :bold t :overline nil))))
   '(org-level-2 ((t (:background nil :bold t :overline nil)))))

  (setq org-modules '(org-habit))

  (eval-after-load 'org
    '(org-load-modules-maybe t)))
#+END_SRC

** Agenda and Capture files

Set agenda files.

remove done tasks from the agenda, from [[http://stackoverflow.com/questions/8281604/remove-done-tasks-from-agenda-view][this question]].

Set gtd.org as my default notes file

From [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][This blog entry]], C-c o is set to open the tasks.org

#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :defer t
  :config
  (setq org-agenda-files
        (delq nil
              (mapcar (lambda (x) (and (file-exists-p x) x))
                      '("~/Dropbox/org/gtd.org"
                        "~/Dropbox/org/notes.org"
                        "~/Dropbox/org/culture.org"))))
  (custom-set-variables
   '(org-agenda-skip-scheduled-if-done t)
   '(org-agenda-skip-deadline-if-done t))

  (setq org-default-notes-file "~/Dropbox/org/gtb.org"))
#+END_SRC

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the editing
popup window staying within the same window so all the windows don't jump
around. Also, having the top and bottom trailing lines in the block is a waste
of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the block is
indented after editing it in the org src buffer---the leading #s for headers
don't get fontified properly because they appear as Org comments. Setting
~org-src-preserve-indentation~ makes things consistent as it doesn't pad source
blocks with leading spaces.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

** Options
Speed up commands. See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation
for speed keys in Org mode]].

General options.
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-special-ctrl-a/e t)
  (transient-mark-mode nil)
  (setq org-log-done 'time) ;Log the time a task is completed.
  (setq org-habit-graph-column 50) ;position the habit graph on the agenda to
                                        ;the right of the default
  (setq org-hide-emphasis-markers nil)
  (setq inhibit-splash-screen t)
  (setq org-indent-mode t) ;indent the headings for clean view
  (setq org-hide-leading-stars t)
  (setq org-hide-leading-stars-before-indent-mode t)
  (setq org-odd-levels-only t)
  (diminish 'org-indent-mode)
  (setq org-startup-indented t)
  (setq org-tags-column -66) ;where the tags are places
  (setq org-use-speed-commands t)) ; speed up commands
#+END_SRC

Todo sequences.
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-todo-keyword-faces
        '(("TODO" :background "tomato" :foreground "bisque" :weight bold )
          ("STARTED" :background "ForestGreen" :foreground "bisque" :weight bold )
          ("WAITING" :background "DarkOrange" :foreground "bisque" :weight bold )
          ("DONE" :background "RoyalBlue" :foreground "bisque" :weight bold )
          ("CANCELLED" :background "grey50" :foreground "bisque" :weight bold )))

  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-cycle-separator-lines 0))
#+END_SRC

From [[http://stackoverflow.com/questions/28351465/emacs-orgmode-do-not-insert-line-between-headers][This question]], an option for org mode not insert a line between headings.

[[http://orgmode.org/manual/Headlines.html][This reference]] is used to remove an annoying feature of not hiding extra lines
in a subtree.

From the Org Mode Manual, section [[http://orgmode.org/manual/Conflicts.html][15.10.2]]--Packages that lead to conflicts with
Org mode:

#+BEGIN_SRC emacs-lisp
;; 22Sep2016
;; Make windmove work in org-mode:
(setq org-support-shift-select t)
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp)
#+END_SRC

* ELPA packages
** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  ;; (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("C-x o" . ace-window))
#+END_SRC
** Ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag
  :ensure t)
#+END_SRC

** AucTex
*** Basic setup
Enable [[https://www.gnu.org/software/auctex/manual/auctex.html][Auctex]] when files with .tex are loaded. Tex-master is useful to make
Auctex aware of multi-files documents.  TeX-PDF mode is used to compile using
pdflatex.

#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (magic-latex-buffer)
              (LaTeX-math-mode)
              (rainbow-delimiters-mode)
              (flyspell-mode)
              (company-mode)
              (smartparens-mode)
              (turn-on-reftex)
              (setq reftex-plug-into-AUCTeX t)
              (reftex-isearch-minor-mode)
              (setq TeX-PDF-mode t)
              (setq global-font-lock-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-source-correlate-start-server t)))

  ;; https://github.com/politza/pdf-tools/issues/187
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;; to use pdfview with auctex
  (add-hook 'LaTeX-mode-hook 'pdf-tools-install)
  ;; nil beacuse I don't want the pdf to be opened again in the same frame after C-c C-a
  ;; (setq TeX-view-program-selection nil)
  ;; (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
  ;; (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))

  ;; https://github.com/politza/pdf-tools/pull/60
  (setq pdf-sync-forward-display-action
        '(display-buffer-reuse-window (reusable-frames . t)))
  ;; same thing, now I can jump from pdf in another frame into source
  (setq pdf-sync-backward-display-action
        '(display-buffer-reuse-window (reusable-frames . t)))

  ;; language specific hooks in auctex
  (add-hook 'TeX-language-dk-hook
            (lambda () (ispell-change-dictionary "brasileiro"))))
#+END_SRC

*** Company auctex

From [[https://github.com/manugoyal/.emacs.d#latex][here]].

#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :ensure t
  :defer t
  :config
  (company-auctex-init))
#+END_SRC

*** Latex preview pane

shell-escape mode because the pacakge svg requires it.

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :disabled t
  :bind ("M-p" . latex-preview-pane-mode)
  :config
  (setq doc-view-ghostscript-program "gswin64c")

  (custom-set-variables
   '(shell-escape-mode "-shell-escape")
   '(latex-preview-pane-multifile-mode (quote auctex))))
#+END_SRC
** Company
Auto complete

The configurations were taken from [[https://github.com/company-mode/company-mode/issues/68][This discussion]]. The delay time from the
wiki. This [[https://www.reddit.com/r/emacs/comments/3s5bkf/companymode_configuration_make_editing_slow/][reddit thread]] has some cool configurations. [[https://github.com/manugoyal/.emacs.d#company-mode][Company capf is
problematic?]]

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :defer t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-idle-delay 0)
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 3)
  (delete 'company-capf company-backends))
#+END_SRC
** ESS (Emacs Speaks Statistics)
#+BEGIN_SRC emacs-lisp
(use-package ess-site
  :defer t
  :mode (("\\.sp\\'"           . S-mode)
         ("/R/.*\\.q\\'"       . R-mode)
         ("\\.[qsS]\\'"        . S-mode)
         ("\\.ssc\\'"          . S-mode)
         ("\\.SSC\\'"          . S-mode)
         ("\\.[rR]\\'"         . R-mode)
         ("\\.[rR]nw\\'"       . Rnw-mode)
         ("\\.[sS]nw\\'"       . Snw-mode)
         ("\\.[rR]profile\\'"  . R-mode)
         ("NAMESPACE\\'"       . R-mode)
         ("CITATION\\'"        . R-mode)
         ("\\.omg\\'"          . omegahat-mode)
         ("\\.hat\\'"          . omegahat-mode)
         ("\\.lsp\\'"          . XLS-mode)
         ("\\.do\\'"           . STA-mode)
         ("\\.ado\\'"          . STA-mode)
         ("\\.[Ss][Aa][Ss]\\'" . SAS-mode)
         ("\\.jl\\'"           . ess-julia-mode)
         ("\\.[Ss]t\\'"        . S-transcript-mode)
         ("\\.Sout"            . S-transcript-mode)
         ("\\.[Rr]out"         . R-transcript-mode)
         ("\\.Rd\\'"           . Rd-mode)
         ("\\.[Bb][Uu][Gg]\\'" . ess-bugs-mode)
         ("\\.[Bb][Oo][Gg]\\'" . ess-bugs-mode)
         ("\\.[Bb][Mm][Dd]\\'" . ess-bugs-mode)
         ("\\.[Jj][Aa][Gg]\\'" . ess-jags-mode)
         ("\\.[Jj][Oo][Gg]\\'" . ess-jags-mode)
         ("\\.[Jj][Mm][Dd]\\'" . ess-jags-mode))
  :config
  (progn
    (add-hook 'ess-mode-hook 'company-mode)
    ;; (add-hook 'ess-mode-hook 'ess-smart-equals-mode)
    ;; (add-hook 'inferior-ess-mode-hook 'ess-smart-equals-mode)
    (add-hook 'ess-mode-hook 'turn-on-orgstruct)
    (add-hook 'ess-mode-hook 'smartparens-mode)
    (add-hook 'ess-mode-hook 'smartparens-strict-mode)
    (add-hook 'ess-R-post-run-hook 'smartparens-mode)
    (add-hook 'ess-R-post-run-hook 'smartparens-strict-mode))
  (with-eval-after-load 'ess-site
    ;; Follow Hadley Wickham's R style guide
    (setq ess-first-continued-statement-offset 2
          ess-continued-statement-offset 0
          ess-expression-offset 2
          ess-nuke-trailing-whitespace-p t
          ess-default-style 'DEFAULT)))
#+END_SRC

** Hungry Delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :diminish hungry-delete
  :config
  (global-hungry-delete-mode)
  (global-set-key (kbd "C-<delete>") 'hungry-delete-forward)
  (global-set-key (kbd "C-<backspace>") 'hungry-delete-backward))
#+END_SRC
** ibuffer-vc
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc
  :diminish ibuffer-vc
  :defer t
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
  (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC
** CANCELLED Ido Vertical Mode
CLOSED: [2016-09-28 Wed 13:28]
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :diminish ido-vertical-mode
  :config
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC

** LaTeX Extra
#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :defer t
  :ensure t)
#+END_SRC

** LaTeX Preview Mode
#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :ensure t
  :defer t)
#+END_SRC
** Magic Latex Buffer
#+BEGIN_SRC emacs-lisp
(use-package magic-latex-buffer
  :config
  (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
  (setq magic-latex-enable-block-highlight nil
        magic-latex-enable-suscript        t
        magic-latex-enable-pretty-symbols  t
        magic-latex-enable-block-align     nil
        magic-latex-enable-inline-image    nil))
#+END_SRC

*** Peep dired
Taken from [[http://pragmaticemacs.com/emacs/quickly-preview-images-and-other-files-with-peep-dired/][here]].
#+BEGIN_SRC emacs-lisp
;; preview files in dired
(use-package peep-dired
  :ensure t
  :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
  :bind (:map dired-mode-map
              ("P" . peep-dired)))
#+END_SRC

** Pdf tools

-From the larslj's  [[https://github.com/larslj/pdf-tools/tree/windows][windows branch]].-

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :mode ("\\.pdf\\'" . pdf-tools-install)
  :bind ("C-c C-g" . pdf-sync-forward-search)
  :defer t
  :config
  (setq mouse-wheel-follow-mouse t)
  (setq pdf-view-resize-factor 1.10))
#+END_SRC

** Reftex

[[http://www.gnu.org/software/auctex/manual/reftex.html#SEC2][RefTex website]]. Useful for managing cross references, bibliographies, indices,
and document navigation.

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :ensure t
  :defer t
  :config
  (setq reftex-cite-prompt-optional-args t)); Prompt for empty
                                        ; optional arguments in
                                        ; cite
#+END_SRC

** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
(use-package relative-line-numbers
  :defer t)
#+END_SRC

** Swiper/Ivy

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function))
  :config
  (use-package flx :ensure t)
  ;; miz fuzzy with plus (.* for each space)
  ;; http://oremacs.com/2016/01/06/ivy-flx/
  (setq ivy-re-builders-alist
  '((ivy-switch-buffer . ivy--regex-plus)
  (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
(progn
  (global-set-key (kbd "C-c C-r") 'ivy-resume)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
         ("C-c u" . swiper-all)))
#+END_SRC
** Smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (progn
    (setq sml/no-confirmation-load-theme t)
    (sml/setup)
    (sml/apply-theme 'automatic)))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :defer t
  :diminish smartparens-mode
  :config
  (smartparens-global-mode)
  (show-smartparens-global-mode t)
  (sp-local-pair 'org-mode "_" "_" )
  (sp-local-pair 'org-mode "*" "*" )
  (sp-local-pair 'latex-mode "$" "$" )
  (sp-local-pair 'latex-mode "\\left(" "\\right)" :trigger "\\l("))
#+END_SRC

** Writegood mode

From [[https://github.com/grettke/help/blob/master/help.org][this source]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package writegood-mode
  :ensure t
  :config
  (eval-after-load "writegood-mode"
    '(diminish 'writegood-mode)))
#+END_SRC

* Misc
** Minibuffer

Minibuffer window expands vertically as necessary to hold the text that you put
in the minibuffer

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t) ;; was grow-only
#+END_SRC

** Dired Stuff
#+BEGIN_SRC emacs-lisp
;; dired sorts directories first from
;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst 03Oct2012
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
    (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding mark."
  (mydired-sort))
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** IBuffer
#+BEGIN_SRC emacs-lisp
;; see http://www.emacswiki.org/emacs/IbufferMode 30Jul2014 Use human
;; readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)))

;; From ibuffer-vc.el
(add-hook 'ibuffer-hook
          (lambda ()
            (ibuffer-vc-set-filter-groups-by-vc-root)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; turn off ibuffer-show-empty-filter-groups
;; From http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
