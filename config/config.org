#+TITLE: Personal Emacs Configuration
#+AUTHOR: Gil Tomás

* Notes
This file is my personal ~Emacs~ configuration to be integrated with
[[https://github.com/bbatsov/prelude][prelude]].  Copy this file to the ~personal/config~ directory under
~.emacs.d~.

This file is based on previous iterations of ~config.org~.  This file has been
refactored on [2017-08-12 Sat].

* Load
*** package management
#+BEGIN_SRC emacs-lisp
;; Set up package
;; initalize all ELPA packages
(require 'package)
(setq package-enable-at-startup nil
      package-archives
      '(("melpa" . "http://melpa.org/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("gnu" . "https://elpa.gnu.org/packages/")))
#+END_SRC

*** use-package

See the [[http://github.com/jwiegley/use-package/][Github page]] for use-package.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
(require 'diminish) ;; if you use :diminish
(require 'bind-key)
#+END_SRC

* Prelude hacks
#+BEGIN_SRC emacs-lisp
;; cancels prelude-ui.el instruction to render the fringe (gutter) smaller
;; the argument is a width in pixels (the default is 8)
(if (fboundp 'fringe-mode)
    (fringe-mode 8))
;; rebinds C-- and C-+ to negative and positive arguments respectively,
;; overriding code on prelude-global-keybindings.el (previously bound to
;; text-scale-increase/decrease)
;; 03Aug2015
(global-set-key (kbd "C--") 'negative-argument)
(global-set-key (kbd "C-+") 'positive-argument)
;; 13Aug2017
;; retouch prelude-mode keymap so that it does't interfere with org-mode
;; two sources inspired this snipet:
;; http://ergoemacs.org/emacs/reclaim_keybindings.html
;; https://github.com/novoid/dot-emacs/blob/master/config.org#move-text---move-line-updown--m---m-
(require 'prelude-mode)
(define-key prelude-mode-map (kbd "C-S-<up>") nil)
(define-key prelude-mode-map (kbd "C-S-<down>") nil)
(define-key prelude-mode-map (kbd "M-S-<up>") nil)
(define-key prelude-mode-map (kbd "M-S-<down>") nil)
(define-key prelude-mode-map (kbd "M-,") 'move-text-up)
(define-key prelude-mode-map (kbd "M-.") 'move-text-down)
;; to avoid conflict with remaped prefix for smartparens
(define-key prelude-mode-map (kbd "C-c s") nil)
(define-key prelude-mode-map (kbd "C-c w") 'crux-swap-windows)
;; 19Aug2017
;; redefine 'C-c k' as backward-kill-line
;; backward-kill-line is a function defined in:
;; https://www.emacswiki.org/emacs/BackwardKillLine
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))
(define-key prelude-mode-map (kbd "C-c k") nil)
(global-set-key (kbd "C-c k") 'backward-kill-line)
#+END_SRC

* Sensible defaults
#+BEGIN_SRC emacs-lisp
;; removes all scroll bars
(scroll-bar-mode -1)
;; configures emacs so that word moving commands will move cursor into
;; between CamelCaseWords
(global-subword-mode 1)
;; sets set-mark-command-repeat-pop to TRUE
;; non-nil means repeating C-SPC after popping mark pops it again
(setq set-mark-command-repeat-pop t)
;; The right margin is determined by the variable fill-column.  The default
;; value for fill-column is 70; here we set it to 80.
;; 21Sep2016
(setq-default fill-column 80)
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "darwin")
    (set-frame-font "Source Code Pro 14")
  (set-frame-font "Source code Pro 13"))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  ;; (add-hook 'org-mode-hook 'smartparens-mode)
  (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("•")))
  ;; defines variable orgstruct-heading-prefix-regexp
  (setq orgstruct-heading-prefix-regexp "## ")
  ;; Org babel and source blocks
  (setq org-src-fontify-natively t
        org-M-RET-may-split-line '((default . nil))
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-goto-auto-isearch nil
        org-export-babel-evaluate nil
        org-confirm-babel-evaluate nil)
  (use-package smartrep
    :config
    (smartrep-define-key org-mode-map "C-c"
      '(("C-n" . (outline-next-visible-heading 1))
        ("C-p" . (outline-previous-visible-heading 1)))))
  (setq org-special-ctrl-a/e t)
  (setq org-log-done 'time) ;Log the time a task is completed.
  (setq org-habit-graph-column 50) ; position the habit graph on the agenda to
                                        ; the right of the default
  (setq org-hide-emphasis-markers nil)
  (setq inhibit-splash-screen t)
  (setq org-indent-mode t) ; indent the headings for clean view
  (setq org-hide-leading-stars t)
  (setq org-hide-leading-stars-before-indent-mode t)
  (setq org-odd-levels-only t)
  (diminish 'org-indent-mode)
  (setq org-startup-indented t)
  (setq org-tags-column -66) ; where the tags are places
  (setq org-use-speed-commands t) ; speed up commands
  ;; This is for remove the annoying background color on the headings, level 1
  ;; and level 2, when using the material-theme.
  (custom-set-faces
   '(org-level-1 ((t (:background nil :bold t :overline nil))))
   '(org-level-2 ((t (:background nil :bold t :overline nil))))))
#+END_SRC

Todo sequences.

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-todo-keyword-faces
        '(("TODO" :background "tomato" :foreground "bisque" :weight bold )
          ("STARTED" :background "ForestGreen" :foreground "bisque" :weight bold )
          ("WAITING" :background "DarkOrange" :foreground "bisque" :weight bold )
          ("DONE" :background "RoyalBlue" :foreground "bisque" :weight bold )
          ("CANCELLED" :background "grey50" :foreground "bisque" :weight bold )))
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-cycle-separator-lines 0))
#+END_SRC

From the Org Mode Manual, section [[http://orgmode.org/manual/Conflicts.html][15.10.2]]--Packages that lead to conflicts with
Org mode:

#+BEGIN_SRC emacs-lisp
;; 22Sep2016
;; Make windmove work in org-mode:
(setq org-support-shift-select t)
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

* ELPA Packages
** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ag
  :config (key-chord-define-global "ww" 'ace-window))
#+END_SRC
** ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :bind ("C-c a" . ag)
  :commands ag)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 3))
#+END_SRC
** TODO dired-hacks
Fuco1 collection of useful dired additions.  Needs to be integrated under
Misc/Dired Stuff.
** ess (emacs-speaks-statistics)
#+BEGIN_SRC emacs-lisp
(use-package ess
  :config
  (require 'ess-site)
  (require 'smartparens-ess)
  (add-hook 'inferior-ess-mode-hook 'smartparens-strict-mode)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (setq ess-eval-visibly-p 'nowait))
#+END_SRC
** hungry-delete
From a Artur Malabarba [[http://endlessparentheses.com/hungry-delete-mode.html][post]].
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :config
  (global-hungry-delete-mode))
#+END_SRC
** TODO linum-relative
Find an easy solution to implement relative line numbers.
** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :diminish ido-vertical-mode
  :config
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
** TODO magic-latex-buffer
Decide whether to keep this package.
** TODO markdown-mode
Configure this package.
** page-break-lines
From Steve Purcell. Github page [[https://github.com/purcell/page-break-lines][here]].
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t
  :config
  (global-page-break-lines-mode))
#+END_SRC
** TODO peep-dired
Convenience function to use within dired.  Needs to be configured under
Misc/Dired Stuff.  Needs integration with dired-hacks.
** TODO polymode
Allows for loading several major modes throughout the same buffer.  Required to
edit markdown files with R code.  Interacts with markdown-mode.
** smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  ;; 17Aug2017
  ;; https://gist.github.com/oantolin/5751fbaa7b8ab4f9570893f2adfe1862
  :init
  (smartparens-global-mode)
  ;; (smartparens-global-strict-mode)
  :bind
  (:map smartparens-mode-map
        ;; taken from http://gongzhitaao.org/dotemacs/#sec:miscpac
        ("C-<right>" . nil)
        ("C-<left>" . nil)
        ("C-)" . nil)
        ("C-(" . nil)
        ("C-}" . nil)
        ("C-{" . nil)
        ("M-<down>" . nil)
        ("M-<up>" . nil)
        ("M-r" . nil)
        ("C-S-<backspace>" . nil)
        ("C-c s f" . sp-forward-sexp)
        ("C-c s b" . sp-backward-sexp)
        ("C-c s d" . sp-down-sexp)
        ("C-c s D" . sp-backward-down-sexp)
        ("C-c s a" . sp-beginning-of-sexp)
        ("C-c s e" . sp-end-of-sexp)
        ("C-c s u" . sp-up-sexp)
        ("C-c s U" . sp-backward-up-sexp)
        ("C-c s t" . sp-transpose-sexp)
        ("C-c s n" . sp-next-sexp)
        ("C-c s p" . sp-previous-sexp)
        ("C-c s k" . sp-kill-sexp)
        ("C-c s w" . sp-copy-sexp)
        ("C-c s s" . sp-forward-slurp-sexp)
        ("C-c s r" . sp-forward-barf-sexp)
        ("C-c s S" . sp-backward-slurp-sexp)
        ("C-c s R" . sp-backward-barf-sexp)
        ("C-c s F" . sp-forward-symbol)
        ("C-c s B" . sp-backward-symbol)
        ("C-c s [" . sp-select-previous-thing)
        ("C-c s ]" . sp-select-next-thing)
        ("C-c s C-i" . sp-splice-sexp)
        ("C-c s <delete>" . sp-splice-sexp-killing-forward)
        ("C-c s <backspace>" . sp-splice-sexp-killing-backward)
        ("C-c s C-<backspace>" . sp-splice-sexp-killing-around)
        ("C-c s C-w" . sp-wrap)
        ("C-c s C-u" . sp-unwrap-sexp)
        ("C-c s C-b" . sp-backward-unwrap-sexp)
        ("C-c s C-t" . sp-prefix-tag-object)
        ("C-c s C-p" . sp-prefix-pair-object)
        ("C-c s C-c" . sp-convolute-sexp)
        ("C-c s C-a" . sp-absorb-sexp)
        ("C-c s C-e" . sp-emit-sexp)
        ("C-c s C-p" . sp-add-to-previous-sexp)
        ("C-c s C-n" . sp-add-to-next-sexp)
        ("C-c s C-j" . sp-join-sexp)
        ("C-c s C-s" . sp-split-sexp)
        ("C-c s C-r" . sp-raise-sexp))
  :config
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode))
#+END_SRC
** swiper
*** counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function))
  :config
  (use-package flx)
  ;; miz fuzzy with plus (.* for each space)
  ;; http://oremacs.com/2016/01/06/ivy-flx/
  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil))
#+END_SRC

*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (progn
    (global-set-key (kbd "C-c C-r") 'ivy-resume)))
#+END_SRC

*** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper)
         ("C-c u" . swiper-all)))
#+END_SRC

*** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :defer t)
#+END_SRC

* Misc
** Dired Stuff
#+BEGIN_SRC emacs-lisp
;; defines variable dired-listing-switches
(setq dired-listing-switches "-alh")

;; dired sorts directories first from
;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst 03Oct2012
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
    (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding mark."
  (mydired-sort))
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

This code snippet taken from [[http://oremacs.com/2016/02/24/dired-rsync/][here]] on 20Feb2017 allows for the asynchronous use
of rsync within dired.

#+BEGIN_SRC emacs-lisp
(defun ora-dired-rsync (dest)
  (interactive
   (list
    (expand-file-name
     (read-file-name
      "Rsync to:"
      (dired-dwim-target-directory)))))
  ;; store all selected files into "files" list
  (let ((files (dired-get-marked-files
                nil current-prefix-arg))
        ;; the rsync command
        (tmtxt/rsync-command
         "rsync -arvz --progress "))
    ;; add all selected file names as arguments
    ;; to the rsync command
    (dolist (file files)
      (setq tmtxt/rsync-command
            (concat tmtxt/rsync-command
                    (shell-quote-argument file)
                    " ")))
    ;; append the destination
    (setq tmtxt/rsync-command
          (concat tmtxt/rsync-command
                  (shell-quote-argument dest)))
    ;; run the async shell command
    (async-shell-command tmtxt/rsync-command "*rsync*")
    ;; finally, switch to that window
    (other-window 1)))

(define-key dired-mode-map "Y" 'ora-dired-rsync)
#+END_SRC

** Eshell
This snippet was taken from [[https://github.com/grettke/help/blob/master/help.org#eshell][here]], on 10Feb2017.  According to Grant Rettke's
notes:

Provide a cross-platform command line shell that is a first-class EMACS citizen.

Commands input in eshell are delegated in order to an alias, a built in command,
an Elisp function with the same name, and finally to a system call.  Semicolons
separate commands.  ~which~ tells you what implementation will satisfy the call
that you are going to make.  The flag ~eshell-prefer-lisp-functions~ does what
it says.  ~$$~ is the result of the last command.  Aliases live in
~eshell-aliases-file~.  History is maintained and expandable.
~eshell-source-file~ will run scripts.  Since Eshell is not a terminal emulator,
you need to configure it for any commands that need to run using a terminal
emulator by adding it to ~eshell-visual-commands~.

#+BEGIN_SRC emacs-lisp
(setq eshell-prefer-lisp-functions nil
      eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\~\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")
#+END_SRC

Defines eshell aliases.

#+BEGIN_SRC emacs-lisp
(defalias 'ff 'find-file)
(defalias 'd 'dired)
#+END_SRC

Configure a ~PS1~ like prompt.

#+BEGIN_SRC emacs-lisp
(setq eshell-prompt-regexp "^.+@.+:.+> ")
(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "┌─[" 'face `(:foreground "grey50"))
         (propertize (user-login-name) 'face `(:foreground "tomato"))
         (propertize "@" 'face `(:foreground "grey50"))
         (propertize (system-name) 'face `(:foreground "RoyalBlue"))
         (propertize "]──[" 'face `(:foreground "grey50"))
         (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "DarkOrange"))
         (propertize "]──[" 'face `(:foreground "grey50"))
         (propertize (concat (eshell/pwd)) 'face `(:foreground "bisque"))
         (propertize "]\n" 'face `(:foreground "grey50"))
         (propertize "└─>" 'face `(:foreground "grey50"))
         (propertize (if (= (user-uid) 0) " # " " $ "))
         )))
#+END_SRC

** IBuffer
*** ibuffer-vc
Package ibuffer-vc
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc
  :diminish ibuffer-vc
  :defer t
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)))
  ;; turn off ibuffer-show-empty-filter-groups
  ;; From http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
  (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

*** other modifications
#+BEGIN_SRC emacs-lisp
;; see http://www.emacswiki.org/emacs/IbufferMode
;; 30Jul2014
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

#+END_SRC
** LaTeX
*** latex-extra
Defines extra commands and keys for LaTeX-mode (Artur Malabarba).
#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :ensure t
  :defer t)
#+END_SRC
*** TODO zotelo
Is currently not working on Fedora 26; needs to be fixed.
#+BEGIN_SRC emacs-lisp
;; https://github.com/vitoshka/zotelo
;; https://forums.zotero.org/discussion/19608/zotero-emacs-integration/
(use-package zotelo
  :config
  (add-hook 'TeX-mode-hook 'zotelo-minor-mode)
  (add-hook 'org-mode-hook 'zotelo-minor-mode)
  ;; C-c z c         zotelo-set-collection (also C-c z s)
  ;; C-c z u         zotelo-update-database
  ;; C-c z e         zotelo-export-secondary
  ;; C-c z r         zotelo-reset
  ;; C-c z t         zotelo-set-translator
  )
#+END_SRC
** Minibuffer
Minibuffer window expands vertically as necessary to hold the text that you put
in the minibuffer

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t) ;; was grow-only
#+END_SRC

** Mode Line
*** what to show
From [[https://www.emacswiki.org/emacs/ModeLineConfiguration][EmacsWiki]].
Taken on [2017-07-05 Wed]

#+BEGIN_SRC emacs-lisp
;; (setq line-number-mode nil)
;; (setq column-number-mode nil)
(setq size-indication-mode nil)
(setq display-time-day-and-date t)
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC

*** smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config
  (sml/setup)
  (sml/apply-theme 'automatic))
#+END_SRC

*** rich-minority
#+BEGIN_SRC emacs-lisp
(use-package rich-minority
  :config
  (rich-minority-mode 1)
  (setf rm-whitelist " SP"))
#+END_SRC

** Shell
What's new in 25.1, from Mickey Petersen's [[https://www.masteringemacs.org/article/whats-new-in-emacs-25-1][masteringemacs.org]] blog:

When you invoke 'shell' interactively, the '*shell*' buffer will now
display in a new window.  However, you can customize this behavior via
the 'display-buffer-alist' variable.  For example, to get
the old behavior -- '*shell*' buffer displays in current window -- use

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             '("^\\*shell\\*$" . (display-buffer-same-window)))
#+END_SRC
