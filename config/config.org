#+TITLE: Personal Emacs Configuration
#+AUTHOR: Gil Tomás
#+STARTUP: overview

* Notes
This file is my personal ~Emacs~ configuration to be integrated with
[[https://github.com/bbatsov/prelude][prelude]].  Symlink this file to the ~personal/config~ directory under
~.emacs.d~.

This file is based on previous iterations of ~config.org~.  This file has been
refactored on [2017-08-12 Sat].

* Load
** package management
#+BEGIN_SRC emacs-lisp
;; Set up package
;; initalize all ELPA packages
(require 'package)
(setq package-enable-at-startup nil
      package-archives
      '(("melpa-stable" . "https://stable.melpa.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)
#+END_SRC

** use-package
See the [[http://github.com/jwiegley/use-package/][Github page]] for use-package.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
(require 'diminish) ;; if you use :diminish
(require 'bind-key)
#+END_SRC

* Prelude hacks
#+BEGIN_SRC emacs-lisp
;; cancels prelude-ui.el instruction to render the fringe (gutter) smaller
;; the argument is a width in pixels (the default is 8)
(if (fboundp 'fringe-mode)
    (fringe-mode 8))
;; rebinds C-- and C-+ to negative and positive arguments respectively,
;; overriding code on prelude-global-keybindings.el (previously bound to
;; text-scale-increase/decrease)
;; 03Aug2015
(global-set-key (kbd "C--") 'negative-argument)
(global-set-key (kbd "C-+") 'positive-argument)
;; 13Aug2017
;; retouch prelude-mode keymap so that it does't interfere with org-mode
;; two sources inspired this snipet:
;; http://ergoemacs.org/emacs/reclaim_keybindings.html
;; https://github.com/novoid/dot-emacs/blob/master/config.org#move-text---move-line-updown--m---m-
(require 'prelude-mode)
(define-key prelude-mode-map (kbd "C-S-<up>") nil)
(define-key prelude-mode-map (kbd "C-S-<down>") nil)
(define-key prelude-mode-map (kbd "M-S-<up>") nil)
(define-key prelude-mode-map (kbd "M-S-<down>") nil)
(define-key prelude-mode-map (kbd "M-,") 'move-text-up)
(define-key prelude-mode-map (kbd "M-.") 'move-text-down)
;; to avoid conflict with remaped prefix for smartparens
(define-key prelude-mode-map (kbd "C-c s") nil)
(define-key prelude-mode-map (kbd "C-c w") 'crux-swap-windows)
;; 19Aug2017
;; redefine 'C-c k' as backward-kill-line
;; backward-kill-line is a function defined in:
;; https://www.emacswiki.org/emacs/BackwardKillLine
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))
(define-key prelude-mode-map (kbd "C-c k") nil)
;; 21Aug2017
;; bind the already existent function 'crux-kill-line-backwards' to 'C-c k'
;; instead; it adjusts indentation as well
(define-key prelude-mode-map (kbd "C-c k") 'crux-kill-line-backwards)
;; 27Aug2017
;; When remotely editing files on datastore, the warning message 'file changed
;; on disk; really edit the buffer?' pops up repeatedly in the minibuffer, even
;; though no editing has yet taken place.  This greatly disturbs the flow of
;; editing.  After running the command 'diff-buffer-with-file' after one of
;; these interruptions, a string of characters is shown trailing the end of the
;; file, with the message 'No newline at end of file'.  This suggests emacs is
;; somehow attempting to add a newline at the end of file that is not correctly
;; encoded on disk in datastore.  After greping for the variable
;; 'require-final-newline' in Prelude, I found that in 'core/prelude-editor.el'
;; (line 49), the variable is set to 't'.  Here I set it back to the default of
;; nil.
;; (setq require-final-newline nil)
;; UPDATE: this solution seems to not be recommended.
#+END_SRC

* Sensible defaults
#+BEGIN_SRC emacs-lisp
;; removes all scroll bars
(scroll-bar-mode -1)
;; configures emacs so that word moving commands will move cursor into
;; between CamelCaseWords
(global-subword-mode 1)
;; sets set-mark-command-repeat-pop to TRUE
;; non-nil means repeating C-SPC after popping mark pops it again
(setq set-mark-command-repeat-pop t)
;; The right margin is determined by the variable fill-column.  The default
;; value for fill-column is 70; here we set it to 80.
;; 21Sep2016
(setq-default fill-column 80)
;; 27Aug2017
;; From Mickey Petersen's Mastering Emacs
;; https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; 26Jun2018
;; Activate display-line-numbers-mode on prog-mode
;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
;; (add-hook 'text-mode-hook 'display-line-numbers-mode)
(progn
  (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
  (add-hook 'text-mode-hook (lambda () (display-line-numbers-mode 1))))
(setq display-line-numbers-type (quote visual))
;; 03Jul2018
;; From Mickey Petersen's Mastering Emacs
;; https://www.masteringemacs.org/article/working-multiple-files-dired
(require 'find-dired)
(setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))
(setq ivy-initial-inputs-alist nil)
;; 01Aug2018
;; Default shell is zsh
(setq shell-file-name "/bin/zsh")
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "darwin")
    (set-frame-font "Source Code Pro 14")
  (set-frame-font "Source code Pro 13"))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  ;; 05Jun2018
  ;; solution to install org-mode on top of bundled version, as suggested on
  ;; this reddit thread:
  ;; https://www.reddit.com/r/emacs/comments/5sx7j0/how_do_i_get_usepackage_to_ignore_the_bundled/
  :ensure
  org-plus-contrib
  :pin
  org
  :config
  (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("•")))
  ;; Org babel and source blocks
  (setq org-src-fontify-natively t
        org-M-RET-may-split-line '((default . nil))
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-export-babel-evaluate nil
        org-confirm-babel-evaluate nil
        org-directory "~/Dropbox/org")
  (use-package smartrep
    :config
    (smartrep-define-key org-mode-map "C-c"
      '(("C-n" . (outline-next-visible-heading 1))
        ("C-p" . (outline-previous-visible-heading 1)))))
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)
  (setq org-ctrl-k-protect-subtree t)
  (setq org-odd-levels-only nil)
  (setq org-log-done 'time) ;Log the time a task is completed.
  (setq org-habit-graph-column 50) ; position the habit graph on the agenda to
                                        ; the right of the default
  (setq org-hide-emphasis-markers nil)
  (setq org-indent-mode t) ; indent the headings for clean view
  ;; (setq org-hide-leading-stars t)
  ;; (setq org-hide-leading-stars-before-indent-mode t)
  ;; (setq org-odd-levels-only t)
  ;; (diminish 'org-indent-mode)
  (setq org-startup-indented t)
  (setq org-tags-column -66) ; where the tags are places
  (setq org-use-speed-commands t) ; speed up commands
  (setq org-catch-invisible-edits 'smart) ; see section 2.3.3
  ;; This is for remove the annoying background color on the headings, level 1
  ;; and level 2, when using the material-theme.
  (custom-set-faces
   '(org-level-1 ((t (:background nil :bold t :overline nil))))
   '(org-level-2 ((t (:background nil :bold t :overline nil))))))
#+END_SRC

Todo sequences.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
(setq org-todo-keyword-faces
      '(("TODO" :background "tomato" :foreground "bisque" :weight bold )
        ("STARTED" :background "ForestGreen" :foreground "bisque" :weight bold )
        ("NEXT" :background "purple1" :foreground "bisque" :weight bold )
        ("WAITING" :background "DarkOrange" :foreground "bisque" :weight bold )
        ("DONE" :background "RoyalBlue" :foreground "bisque" :weight bold )
        ("CANCELLED" :background "grey50" :foreground "bisque" :weight bold )))
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
(setq org-cycle-separator-lines 0)
#+END_SRC

From the Org Mode Manual, section [[http://orgmode.org/manual/Conflicts.html][15.10.2]]--Packages that lead to conflicts with
Org mode:

#+BEGIN_SRC emacs-lisp
;; 22Sep2016
;; Make windmove work in org-mode:
(setq org-support-shift-select t)
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC
** org global keybindings
Inspired from :ED:modules/prelude.org.el and the Org Manual
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cb" 'org-switchb)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cv" 'org-agenda)
#+END_SRC
** org-capture
From the org manual, section 9.1.1
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/i.org"))
(setq org-refile-targets '(("~/Dropbox/org/gtd.org" :maxlevel . 3)
                           ("~/Dropbox/org/someday.org" :level . 1)
                           ("~/Dropbox/org/tickler.org" :maxlevel . 2)))
#+END_SRC
** org-agenda
[2018-08-11 Sat]
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list "~/Dropbox/org/gmail.org"
                             "~/Dropbox/org/gtd.org"
                             "~/Dropbox/org/tickler.org")
      org-agenda-window-setup 'current-window
      org-agenda-restore-windows-after-quit t)
#+END_SRC
** org-cal
[2018-08-13 Mon]
From [[https://github.com/kidd/org-gcal.el][here]].
#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :defer t
  :ensure t
  :config
  (setq org-gcal-client-id "808841923257-gjna60iamcqatft7oc5l49icni8ks8d0.apps.googleusercontent.com"
        org-gcal-client-secret "izQQXZJEy1c-Fms9OMrwctiM"
        org-gcal-file-alist '("gil.tms@gmail.com" .  "~/Dropbox/org/gmail.org")
        org-gcal-header-alist '("gil.tms@gmail.com" . "#+CATEGORY: personal\n"))
  ;; Mike Zamansky C'est la Z
  ;; http://cestlaz.github.io/posts/using-emacs-26-gcal/
  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync))))
#+END_SRC
* ELPA Packages
** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config (key-chord-define-global "ww" 'ace-window))
#+END_SRC
** ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :bind ("C-c a" . ag)
  :commands ag)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 3))
#+END_SRC
** elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :config
  ;; (setq elpy-rpc-python-command "/usr/local/opt/python/libexec/bin/python")
  (elpy-enable))
#+END_SRC
** ess (emacs-speaks-statistics)
#+BEGIN_SRC emacs-lisp
(use-package ess
  :config
  (require 'ess-site)
  (require 'smartparens-ess)
  (add-hook 'inferior-ess-mode-hook 'smartparens-strict-mode)
  (add-hook 'ess-mode-hook 'smartparens-strict-mode)
  (setq orgstruct-heading-prefix-regexp "## ")
  (add-hook 'ess-mode-hook 'turn-on-orgstruct)
  ;; (setq comint-scroll-to-bottom-on-input t)
  ;; (setq comint-scroll-to-bottom-on-output t)
  ;; (setq comint-move-point-for-output t)
  ;; (setq ess-eval-visibly-p 'nowait)
  )
#+END_SRC
** hungry-delete
From a Artur Malabarba [[http://endlessparentheses.com/hungry-delete-mode.html][post]].
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :config
  (global-hungry-delete-mode))
#+END_SRC
** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :config
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
** markdown-mode
Taken from [[http://jblevins.org/projects/markdown-mode/][here]], on 09Jan2017.
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.[Rr]md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

** page-break-lines
From Steve Purcell. Github page [[https://github.com/purcell/page-break-lines][here]].
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t
  :config
  (global-page-break-lines-mode))
#+END_SRC
** TODO peep-dired
Convenience function to use within dired.  Needs to be configured under
Misc/Dired Stuff.  Needs integration with dired-hacks.
** polymode
Taken from [[https://github.com/basille/.emacs.d/blob/master/init.el][here,]] on 09Jan2017.
#+BEGIN_SRC emacs-lisp
;; Polymode to load several modes (e.g. Markdown + ESS)
;; https://github.com/vitoshka/polymode
(use-package polymode
  :mode (("\\.md"     . poly-markdown-mode)   ; Markdown files
         ("\\.[rR]md" . poly-markdown+r-mode) ; RMarkdown files
         ("\\.[sSrR]nw" . poly-noweb+r-mode)) ; Sweave files
  :init
  (progn
    ;; Load necessary modes
    (require 'poly-R)
    (require 'poly-markdown)
    (require 'poly-noweb)
    (setq
     ;; Default weaver and default exporter
     pm-weaver "knitR-ESS"
     pm-exporter "pandoc")
    (bind-keys :map polymode-mode-map
               ;; C-Page Up to move to the previous chunk (code or comment)
               ;; C-Page Down to move to the next chunk (code or comment)
               ;; C-S-Page Up to move to the previous chunk of the same type
               ;; C-S-Page Down to move to the next chunk of the same type
               ([(C-prior)] . polymode-previous-chunk)
               ([(C-next)] . polymode-next-chunk)
               ([(C-S-prior)] . polymode-previous-chunk-same-type)
               ([(C-S-next)] . polymode-next-chunk-same-type))))
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  ;; 17Aug2017
  ;; https://gist.github.com/oantolin/5751fbaa7b8ab4f9570893f2adfe1862
  :init
  (smartparens-global-mode)
  ;; (smartparens-global-strict-mode)
  :bind
  (:map smartparens-mode-map
        ;; taken from http://gongzhitaao.org/dotemacs/#sec:miscpac
        ("C-<right>" . nil)
        ("C-<left>" . nil)
        ("C-)" . nil)
        ("C-(" . nil)
        ("C-}" . nil)
        ("C-{" . nil)
        ("M-<down>" . nil)
        ("M-<up>" . nil)
        ("M-r" . nil)
        ("C-S-<backspace>" . nil)
        ("C-c s f" . sp-forward-sexp)
        ("C-c s b" . sp-backward-sexp)
        ("C-c s d" . sp-down-sexp)
        ("C-c s D" . sp-backward-down-sexp)
        ("C-c s a" . sp-beginning-of-sexp)
        ("C-c s e" . sp-end-of-sexp)
        ("C-c s u" . sp-up-sexp)
        ("C-c s U" . sp-backward-up-sexp)
        ("C-c s t" . sp-transpose-sexp)
        ("C-c s n" . sp-next-sexp)
        ("C-c s p" . sp-previous-sexp)
        ("C-c s k" . sp-kill-sexp)
        ("C-c s w" . sp-copy-sexp)
        ("C-c s s" . sp-forward-slurp-sexp)
        ("C-c s r" . sp-forward-barf-sexp)
        ("C-c s S" . sp-backward-slurp-sexp)
        ("C-c s R" . sp-backward-barf-sexp)
        ("C-c s F" . sp-forward-symbol)
        ("C-c s B" . sp-backward-symbol)
        ("C-c s [" . sp-select-previous-thing)
        ("C-c s ]" . sp-select-next-thing)
        ("C-c s C-i" . sp-splice-sexp)
        ("C-c s <delete>" . sp-splice-sexp-killing-forward)
        ("C-c s <backspace>" . sp-splice-sexp-killing-backward)
        ("C-c s C-<backspace>" . sp-splice-sexp-killing-around)
        ("C-c s C-w" . sp-wrap)
        ("C-c s C-u" . sp-unwrap-sexp)
        ("C-c s C-b" . sp-backward-unwrap-sexp)
        ("C-c s C-t" . sp-prefix-tag-object)
        ("C-c s C-p" . sp-prefix-pair-object)
        ("C-c s C-c" . sp-convolute-sexp)
        ("C-c s C-a" . sp-absorb-sexp)
        ("C-c s C-e" . sp-emit-sexp)
        ("C-c s C-p" . sp-add-to-previous-sexp)
        ("C-c s C-n" . sp-add-to-next-sexp)
        ("C-c s C-j" . sp-join-sexp)
        ("C-c s C-s" . sp-split-sexp)
        ("C-c s C-r" . sp-raise-sexp))
  :config
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode))
#+END_SRC
** swiper
*** counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function))
  :config
  (use-package flx
    :ensure t)
  ;; mix fuzzy with plus (.* for each space)
  ;; http://oremacs.com/2016/01/06/ivy-flx/
  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-all . regexp-quote)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil))
#+END_SRC
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (progn
    (global-set-key (kbd "C-c C-r") 'ivy-resume)))
#+END_SRC
*** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper)
         ("C-c q" . swiper-all)))
#+END_SRC
*** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :defer t)
#+END_SRC

* Misc
** Dired Stuff
*** dired-listing-switches
#+BEGIN_SRC emacs-lisp
;; defines variable dired-listing-switches
(setq dired-listing-switches "-alh")

;; dired sorts directories first from
;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst 03Oct2012
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
    (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding mark."
  (mydired-sort))
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

*** CANCELLED rsync with dired (bound to Y)
CLOSED: [2018-06-04 Mon 17:00]
Superseded by the package dired-rsync.

This code snippet taken from [[http://oremacs.com/2016/02/24/dired-rsync/][here]] on 20Feb2017 allows for the asynchronous use
of rsync within dired.

#+BEGIN_SRC emacs-lisp
(defun ora-dired-rsync (dest)
  (interactive
   (list
    (expand-file-name
     (read-file-name
      "Rsync to:"
      (dired-dwim-target-directory)))))
  ;; store all selected files into "files" list
  (let ((files (dired-get-marked-files
                nil current-prefix-arg))
        ;; the rsync command
        (tmtxt/rsync-command
         "rsync -arvz --progress "))
    ;; add all selected file names as arguments
    ;; to the rsync command
    (dolist (file files)
      (setq tmtxt/rsync-command
            (concat tmtxt/rsync-command
                    (shell-quote-argument file)
                    " ")))
    ;; append the destination
    (setq tmtxt/rsync-command
          (concat tmtxt/rsync-command
                  (shell-quote-argument dest)))
    ;; run the async shell command
    (async-shell-command tmtxt/rsync-command "*rsync*")
    ;; finally, switch to that window
    (other-window 1)))

(define-key dired-mode-map "Y" 'ora-dired-rsync)
#+END_SRC
*** dired-rsync
#+BEGIN_SRC emacs-lisp
(use-package dired-rsync
  :config
  (bind-key "Y" 'dired-rsync dired-mode-map))
#+END_SRC
*** enhanced beginning- and end-of-buffer
This code snippet is not just specific to dired, but is of most use there.
Taken from [[https://fuco1.github.io/2017-05-06-Enhanced-beginning--and-end-of-buffer-in-special-mode-buffers-(dired-etc.).html][here]], on [2017-09-28 Thu].

#+BEGIN_SRC emacs-lisp
(defmacro my-special-beginning-of-buffer (mode &rest forms)
  "Define a special version of `beginning-of-buffer' in MODE.

The special function is defined such that the point first moves
to `point-min' and then FORMS are evaluated.  If the point did
not change because of the evaluation of FORMS, jump
unconditionally to `point-min'.  This way repeated invocations
toggle between real beginning and logical beginning of the
buffer."
  (declare (indent 1))
  (let ((fname (intern (concat "my-" (symbol-name mode) "-beginning-of-buffer")))
        (mode-map (intern (concat (symbol-name mode) "-mode-map")))
        (mode-hook (intern (concat (symbol-name mode) "-mode-hook"))))
    `(progn
       (defun ,fname ()
         (interactive)
         (let ((p (point)))
           (goto-char (point-min))
           ,@forms
           (when (= p (point))
             (goto-char (point-min)))))
       (add-hook ',mode-hook
                 (lambda ()
                   (define-key ,mode-map
                     [remap beginning-of-buffer] ',fname))))))

(defmacro my-special-end-of-buffer (mode &rest forms)
  "Define a special version of `end-of-buffer' in MODE.

The special function is defined such that the point first moves
to `point-max' and then FORMS are evaluated.  If the point did
not change because of the evaluation of FORMS, jump
unconditionally to `point-max'.  This way repeated invocations
toggle between real end and logical end of the buffer."
  (declare (indent 1))
  (let ((fname (intern (concat "my-" (symbol-name mode) "-end-of-buffer")))
        (mode-map (intern (concat (symbol-name mode) "-mode-map")))
        (mode-hook (intern (concat (symbol-name mode) "-mode-hook"))))
    `(progn
       (defun ,fname ()
         (interactive)
         (let ((p (point)))
           (goto-char (point-max))
           ,@forms
           (when (= p (point))
             (goto-char (point-max)))))
       (add-hook ',mode-hook
                 (lambda ()
                   (define-key ,mode-map
                     [remap end-of-buffer] ',fname))))))

;; Dired
(my-special-beginning-of-buffer dired
  (while (not (ignore-errors (dired-get-filename)))
    (dired-next-line 1)))
(my-special-end-of-buffer dired
  (dired-previous-line 1))

;; Occur
(my-special-beginning-of-buffer occur
  (occur-next 1))
(my-special-end-of-buffer occur
  (occur-prev 1))

;; IBuffer
(my-special-beginning-of-buffer ibuffer
  (ibuffer-forward-line 1))
(my-special-end-of-buffer ibuffer
  (ibuffer-backward-line 1))

;; Recentf
(my-special-beginning-of-buffer recentf-dialog
  (when (re-search-forward "^  \\[" nil t)
    (goto-char (match-beginning 0))))
(my-special-end-of-buffer recentf-dialog
  (re-search-backward "^  \\[" nil t))

;; Org-agenda
(my-special-beginning-of-buffer org-agenda
  (org-agenda-next-item 1))
(my-special-end-of-buffer org-agenda
  (org-agenda-previous-item 1))

;; ag
(my-special-beginning-of-buffer ag
  (compilation-next-error 1))
(my-special-end-of-buffer ag
  (compilation-previous-error 1))
#+END_SRC
*** dired-filter
The filtering system is designed after ibuffer: every dired buffer has
associated "filter stack" where user can push filters (predicates).  These
filters are by default logically "anded", meaning, only the files satsifying all
the predicates are shown.

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :ensure t
  :defer t)
#+END_SRC
*** dired-narrow
This package provides live filtering of files in dired buffers.  In general,
after calling the respective narrowing function you type a filter string into
the minibuffer.  After each change the changes automatically reflect in the
buffer.  Typing C-g will cancel the narrowing and restore the original view,
typing RET will exit the live filtering mode and leave the dired buffer in the
narrowed state. To bring it back to the original view, you can call
revert-buffer (usually bound to g).

The following snippet was taken from [[http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/][here]] on [2017-12-08 Fri].

#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+END_SRC

** Eshell
:PROPERTIES:
:ATTACH_DIR_INHERIT: t
:END:
This Mike Petersen's [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][article]] on Eshell on his Mastering Emacs blog is a must
read.  Also, see this [[http://howardism.org/Technical/Emacs/eshell-present.html][blogpost]] from Howard Abrams outlining some of Eshell
strengths.

This snippet dispatches programs to 'ansi-term' automatically:

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'eshell-visual-commands "htop")
#+END_SRC

This snippet defines eshell aliases:

#+BEGIN_SRC emacs-lisp
(defalias 'ff 'find-file)
(defalias 'd 'dired)
#+END_SRC

This snippet configures the prompt:

#+BEGIN_SRC emacs-lisp
(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "┌─[" 'face `(:foreground "grey50"))
         (propertize (user-login-name) 'face `(:foreground "tomato"))
         (propertize "@" 'face `(:foreground "grey50"))
         (propertize (system-name) 'face `(:foreground "RoyalBlue"))
         (propertize "]──[" 'face `(:foreground "grey50"))
         (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "DarkOrange"))
         (propertize "]──[" 'face `(:foreground "grey50"))
         (propertize (concat (eshell/pwd)) 'face `(:foreground "bisque"))
         (propertize "]\n" 'face `(:foreground "grey50"))
         (propertize "└─>" 'face `(:foreground "grey50"))
         (propertize (if (= (user-uid) 0) " # " " $ "))
         )))
#+END_SRC

** IBuffer
*** ibuffer-vc
Package ibuffer-vc
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc
  :diminish ibuffer-vc
  :defer t
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)))
  ;; turn off ibuffer-show-empty-filter-groups
  ;; From http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
  (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

*** other modifications
#+BEGIN_SRC emacs-lisp
;; see http://www.emacswiki.org/emacs/IbufferMode
;; 30Jul2014
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

#+END_SRC
** LaTeX
Fix issue in prelude-latex.el concerning TeX-open-quote and TeX-close-quote
#+BEGIN_SRC emacs-lisp
(setq TeX-close-quote "''")
(setq TeX-open-quote "``")
#+END_SRC
*** RefTex
As in the manual, section 1.1.3
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
#+END_SRC
*** latex-extra
Defines extra commands and keys for LaTeX-mode (Artur Malabarba).
#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :ensure t
  :defer t
  :config
  (add-hook 'LaTeX-mode-hook #'latex-extra-mode))
#+END_SRC
*** CANCELLED zotelo
CLOSED: [2018-02-05 Mon 10:40]
Is currently not working on Fedora 26; needs to be fixed.
#+BEGIN_SRC emacs-lisp
;; https://github.com/vitoshka/zotelo
;; https://forums.zotero.org/discussion/19608/zotero-emacs-integration/
(use-package zotelo
  :config
  (add-hook 'TeX-mode-hook 'zotelo-minor-mode)
  (add-hook 'org-mode-hook 'zotelo-minor-mode)
  ;; C-c z c         zotelo-set-collection (also C-c z s)
  ;; C-c z u         zotelo-update-database
  ;; C-c z e         zotelo-export-secondary
  ;; C-c z r         zotelo-reset
  ;; C-c z t         zotelo-set-translator
  )
#+END_SRC
*** emacs-zotero-bib-fetch
See comments [[https://github.com/vspinu/zotelo/issues/34][here]].
#+BEGIN_SRC emacs-lisp
(load-file "~/Dropbox/emacs/load/emacs-zotero-bib-fetch.el")
(add-hook 'TeX-mode-hook 'ezbf-minor-mode)
#+END_SRC
*** TODO latex word count
[2018-07-31 Tue]
Fix this function:
- give it documentation
- give it options (to be sent our to the perl script)
- have it write output to new buffer instead of minibuffer
- have it accept regions as input instead of whole file
- give it a meaningful keybinding

This is based on a perl script called texcount.pl that must be found under
~/bin.  Great opportunity to learn some lisp code.
See comments [[https://superuser.com/questions/125027/word-count-for-latex-within-emacs][here]].

[2018-08-10 Fri]
Found [[http://app.uio.no/ifi/texcount/faq.html#emacs][these]] instructions to integrate the code in emacs, provided by the author.

#+BEGIN_SRC emacs-lisp
;;
;; TeXcount setup for TeXcount version 2.3 and later
;;
(defun texcount ()
  (interactive)
  (let*
      ((this-file (buffer-file-name))
       (enc-str (symbol-name buffer-file-coding-system))
       (enc-opt
        (cond
         ((string-match "utf-8" enc-str) "-utf8")
         ((string-match "latin" enc-str) "-latin1")
         ("-encoding=guess")))
       (word-count
        (with-output-to-string
          (with-current-buffer standard-output
            (call-process "texcount" nil t nil "-0" enc-opt this-file)))))
    (message word-count)))
;; (add-hook 'LaTeX-mode-hook (lambda () (define-key LaTeX-mode-map "\C-cw" 'texcount)))
;; (add-hook 'latex-mode-hook (lambda () (define-key latex-mode-map "\C-cw" 'texcount)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun latex-word-count ()
  (interactive)
  (shell-command (concat "~/bin/texcount.pl "
                                        ; "uncomment then options go here"
                         (buffer-file-name))))
;; (define-key latex-mode-map "\C-cw" 'latex-word-count)
#+END_SRC
** Minibuffer
Minibuffer window expands vertically as necessary to hold the text that you put
in the minibuffer

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t) ;; was grow-only
#+END_SRC

** Mode Line
*** what to show
From [[https://www.emacswiki.org/emacs/ModeLineConfiguration][EmacsWiki]].
Taken on [2017-07-05 Wed]

#+BEGIN_SRC emacs-lisp
;; (setq line-number-mode nil)
;; (setq column-number-mode nil)
(setq size-indication-mode nil)
(setq display-time-day-and-date t)
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC

*** smart-mode-line
smart-mode-line causes term-mode to hang.  Waiting for a fix to re-enable.
https://github.com/Malabarba/smart-mode-line/issues/226
https://github.com/bbatsov/prelude/issues/1176
[2018-07-23 Mon]
On hindsight, decided to re-enable the mode, but to silence the binding to
the command crux-visit-term-buffer.  This advice should be removed once the
issue with smart-model-line is fixed.
[2018-08-14 Tue]
Issue has now been fixed (See [[https://github.com/Malabarba/smart-mode-line/issues/226][here]]).
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :config
  (sml/setup)
  (sml/apply-theme 'automatic)
  (setq sml/name-width 30)
  (setq sml/mode-width 'full))
#+END_SRC

*** rich-minority
#+BEGIN_SRC emacs-lisp
(use-package rich-minority
  :config
  (rich-minority-mode 1)
  (setf rm-whitelist " SP"))
#+END_SRC

** Shell
What's new in 25.1, from Mickey Petersen's [[https://www.masteringemacs.org/article/whats-new-in-emacs-25-1][masteringemacs.org]] blog:

When you invoke 'shell' interactively, the '*shell*' buffer will now
display in a new window.  However, you can customize this behavior via
the 'display-buffer-alist' variable.  For example, to get
the old behavior -- '*shell*' buffer displays in current window -- use

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             '("^\\*shell\\*$" . (display-buffer-same-window)))
#+END_SRC
