#+TITLE: Personal Emacs Configuration
#+AUTHOR: Gil Tomás

* Notes
Adapted from the config.org files available [[https://github.com/danielmai/.emacs.d/blob/master/config.org][here]] and [[https://github.com/nasseralkmim/.emacs.d/blob/master/config.org][here]].

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is a
fantastic way to manage package configurations. This [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][post]] explain how it works.

This [[http://emacs.stackexchange.com/questions/10396/difference-between-init-and-config-in-use-package][Question]] is useful to understand the differences between init and config.
Basically, bind and init are evaluated immediately after start up which
contributes to startup time, config is deferred until the pacakge is loaded (by
a bind key or a specific mode).

* Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Gil Tomás"
      user-mail-address "gil.tms@gmail.com")
#+END_SRC

* Loading config.org

Using the method described [[http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/][here]].

*** Package management
#+BEGIN_SRC emacs-lisp
(package-initialize nil)
(setq package-enable-at-startup nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;; Set up package
;; initalize all ELPA packages
(require 'package)
(setq package-enable-at-startup nil
      package-archives
      '(("melpa" . "http://melpa.org/packages/")
        ("melpa-stable" . "http://stable.melpa.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("gnu" . "https://elpa.gnu.org/packages/")))
#+END_SRC

*** use-package

See the [[http://github.com/jwiegley/use-package/][Github page]] for use-package or this [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][link]].

Basic syntax:

#+BEGIN_EXAMPLE
(use-package package-name
         [:keyword [option]]...)

:init          Code to run before PACKAGE-NAME has been loaded.
:config        Code to run after PACKAGE-NAME has been loaded.  Note that if
                           loading is deferred for any reason, this code does not execute
                           until the lazy load has occurred.
:preface       Code to be run before everything except `:disabled'; this can
                           be used to define functions for use in `:if', or that should be
                           seen by the byte-compiler.
:mode          Form to be added to `auto-mode-alist'.
:interpreter   Form to be added to `interpreter-mode-alist'.
:commands      Define autoloads for commands that will be defined by the
                           package.  This is useful if the package is being lazily loaded,
                           and you wish to conditionally call functions in your `:init'
                           block that are defined in the package.
:bind          Bind keys, and define autoloads for the bound commands.
:bind*         Bind keys, and define autoloads for the bound commands,
                           *overriding all minor mode bindings*.
:bind-keymap   Bind a key prefix to an auto-loaded keymap defined in the
                           package.  This is like `:bind', but for keymaps.
:bind-keymap*  Like `:bind-keymap', but overrides all minor mode bindings
:defer         Defer loading of a package -- this is implied when using
                           `:commands', `:bind', `:bind*', `:mode' or `:interpreter'.
                           This can be an integer, to force loading after N seconds of
                           idle time, if the package has not already been loaded.
:after         Defer loading of a package until after any of the named
                           features are loaded.
:demand        Prevent deferred loading in all cases.
:if EXPR       Initialize and load only if EXPR evaluates to a non-nil value.
:disabled      The package is ignored completely if this keyword is present.
:defines       Declare certain variables to silence the byte-compiler.
:functions     Declare certain functions to silence the byte-compiler.
:load-path     Add to the `load-path' before attempting to load the package.
:diminish      Support for diminish.el (if installed).
:ensure        Loads the package using package.el if necessary.
:pin           Pin the package to an archive.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)
#+END_SRC

* Custom settings
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el"
                                    prelude-user-init-file))
(load custom-file)
#+END_SRC

* Global Key Bindings
#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC

* Prelude Hacks
#+BEGIN_SRC emacs-lisp
;; cancels prelude-ui.el instruction to render the fringe (gutter) smaller
;; the argument is a width in pixels (the default is 8)
(if (fboundp 'fringe-mode)
    (fringe-mode 8))
;; proced was replaced by vkill on prelude: disable vkill instead
;; 29Jul2014
(put 'vkill 'disabled t)
;; rebinds C-- and C-+ to negative and positive arguments respectively,
;; overriding code on prelude-global-keybindings.el (previously bound to
;; text-scale-increase/decrease)
;; 03Aug2015
(global-set-key (kbd "C--") 'negative-argument)
(global-set-key (kbd "C-+") 'positive-argument)
#+END_SRC

* Font
Download

| [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]     |
| [[https://www.fontsquirrel.com/fonts/download/dejavu-sans][Dejavu Sans]]         |
| [[https://fontlibrary.org/pt/font/fantasque-sans-mono][Fantasque Sans mono]] |
| [[http://leonardo-m.livejournal.com/77079.html][Inconsolata g]]       |

#+BEGIN_SRC emacs-lisp
(if (string-equal system-type "darwin")
    (set-frame-font "Source Code Pro 14")
  (set-frame-font "Source Code Pro 13"))
;; (set-frame-font "Source Code Pro 14")
;; (set-frame-font "Monospace 10")
;; (set-frame-font "Dejavu Sans 10")
;; (set-frame-font "Fantasque Sans Mono 11")
;; (set-frame-font "Inconsolata-g 10")
#+END_SRC

* Common defaults
Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+BEGIN_SRC emacs-lisp
;; already on core/prelude-editor.el
;; These functions are useful.  Activate them.
;; (put 'downcase-region 'disabled nil)
;; (put 'upcase-region 'disabled nil)
;; (put 'narrow-to-region 'disabled nil)
;; (put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; UTF-8 please
(set-language-environment "UTF-8")
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq default-buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; from Sacha page
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
(setq-default indent-tabs-mode nil)

;; already on core/prelude-editor.el
;; (setq uniquify-buffer-name-style 'forward)

;; Don't beep at me
(setq visible-bell t)

;; the following is copied from my previous personal.el
;; 21Sep2014
;; toggles delete-selection-mode on
;; redundant with core/prelude-editor.el
;; (delete-selection-mode 1)
;; toggles display-time mode on
;; (setq display-time-day-and-date t)
;; (display-time)
;; removes all scroll bars
(scroll-bar-mode -1)
;; configures emacs so that word moving commands will move cursor into
;; between CamelCaseWords
(global-subword-mode 1)
;; sets set-mark-command-repeat-pop to TRUE
;; non-nil means repeating C-SPC after popping mark pops it again
(setq set-mark-command-repeat-pop t)
;; defines variable dired-listing-switches
(setq dired-listing-switches "-alh")
;; defines variable orgstruct-heading-prefix-regexp
(defvar orgstruct-heading-prefix-regexp)
(setq orgstruct-heading-prefix-regexp "## ")
;; The right margin is determined by the variable fill-column.  The default
;; value for fill-column is 70; here we set it to 80.  21Sep2016
(setq-default fill-column 80)
#+END_SRC

These are configurations relative to ibuffer coming from my previous presonal.el
file:

#+BEGIN_SRC emacs-lisp
;; see http://www.emacswiki.org/emacs/IbufferMode
;; 30Jul2014
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)))
#+END_SRC

* Org mode
** Org itself
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :bind(("C-c a" . org-agenda)
        ("C-c l" . org-store-link)
        ("C-c c" . org-capture))
  ;; 15Nov2016
  ;; from https://github.com/myuhe/smartrep.el
  ;; (smartrep-define-key
  ;; org-mode-map "C-c" '(("C-n" . (outline-next-visible-heading 1))
  ;; ("C-p" . (outline-previous-visible-heading 1))))
  :config
  (add-hook 'org-mode-hook 'smartparens-mode)
  (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    ;; (setq org-ellipsis " …")
    (setq org-bullets-bullet-list '("•")))
  ;; Org babel and source blocks
  (setq org-src-fontify-natively t
        org-M-RET-may-split-line '((default . nil))
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t
        org-goto-auto-isearch nil
        org-export-babel-evaluate nil
        org-confirm-babel-evaluate nil) ; doesn't ask for confirmation
  ;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  ;; This is for remove the annoying background color on the headings, level 1
  ;; and level 2, when using the material-theme.
  (custom-set-faces
   '(org-level-1 ((t (:background nil :bold t :overline nil))))
   '(org-level-2 ((t (:background nil :bold t :overline nil)))))
  (setq org-modules '(org-habit))
  (eval-after-load 'org
    '(org-load-modules-maybe t))
  ;; 15Nov2016
  ;; as per https://github.com/bbatsov/prelude/issues/394
  (defun my-org-mode-hook ()
    (define-key prelude-mode-map (kbd "C-S-<up>") nil)
    (define-key prelude-mode-map (kbd "C-S-<down>") nil)
    (define-key prelude-mode-map (kbd "M-S-<up>") nil)
    (define-key prelude-mode-map (kbd "M-S-<down>") nil)
    (define-key prelude-mode-map (kbd "M-<up>") nil)
    (define-key prelude-mode-map (kbd "M-<down>") nil)
    (define-key prelude-mode-map (kbd "C-S-<return>") nil)
    (define-key prelude-mode-map (kbd "S-<return>") nil)
    (define-key smartparens-mode-map (kbd "M-<up>") nil)
    (define-key smartparens-mode-map (kbd "M-<down>") nil))
  (add-hook 'org-mode-hook 'my-org-mode-hook))
#+END_SRC

** Agenda and Capture files
Set agenda files.
Remove done tasks from the agenda, from [[http://stackoverflow.com/questions/8281604/remove-done-tasks-from-agenda-view][this question]].
Set gtd.org as my default notes file.
From [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][this blog entry]], C-c o is set to open the tasks.org

#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-agenda-files
        (delq nil
              (mapcar (lambda (x) (and (file-exists-p x) x))
                      '("~/Dropbox/org/gtd.org"
                        "~/Dropbox/org/notes.org"
                        "~/Dropbox/org/culture.org"))))
  (custom-set-variables
   '(org-agenda-skip-scheduled-if-done t)
   '(org-agenda-skip-deadline-if-done t))
  (setq org-default-notes-file "~/Dropbox/org/gtb.org"))
#+END_SRC

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the editing
popup window staying within the same window so all the windows don't jump
around.  Also, having the top and bottom trailing lines in the block is a
waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the block
is indented after editing it in the org src buffer---the leading #s for
headers don't get fontified properly because they appear as Org comments.
Setting ~org-src-preserve-indentation~ makes things consistent as it doesn't
pad source blocks with leading spaces.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

** Options
Speed up commands. See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation
for speed keys in Org mode]].

General options.
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (use-package smartrep
    :config
    (smartrep-define-key org-mode-map "C-c"
      '(("C-n" . (outline-next-visible-heading 1))
        ("C-p" . (outline-previous-visible-heading 1)))))
  (setq org-special-ctrl-a/e t)
  (transient-mark-mode nil)
  (setq org-log-done 'time) ;Log the time a task is completed.
  (setq org-habit-graph-column 50) ;position the habit graph on the agenda to
                                        ;the right of the default
  (setq org-hide-emphasis-markers nil)
  (setq inhibit-splash-screen t)
  (setq org-indent-mode t) ;indent the headings for clean view
  (setq org-hide-leading-stars t)
  (setq org-hide-leading-stars-before-indent-mode t)
  (setq org-odd-levels-only t)
  (diminish 'org-indent-mode)
  (setq org-startup-indented t)
  (setq org-tags-column -66) ;where the tags are places
  (setq org-use-speed-commands t)) ; speed up commands
#+END_SRC

Todo sequences.
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :config
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-todo-keyword-faces
        '(("TODO" :background "tomato" :foreground "bisque" :weight bold )
          ("STARTED" :background "ForestGreen" :foreground "bisque" :weight bold )
          ("WAITING" :background "DarkOrange" :foreground "bisque" :weight bold )
          ("DONE" :background "RoyalBlue" :foreground "bisque" :weight bold )
          ("CANCELLED" :background "grey50" :foreground "bisque" :weight bold )))

  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-cycle-separator-lines 0))
#+END_SRC

From [[http://stackoverflow.com/questions/28351465/emacs-orgmode-do-not-insert-line-between-headers][This question]], an option for org mode not insert a line between headings.

[[http://orgmode.org/manual/Headlines.html][This reference]] is used to remove an annoying feature of not hiding extra lines
in a subtree.

From the Org Mode Manual, section [[http://orgmode.org/manual/Conflicts.html][15.10.2]]--Packages that lead to conflicts with
Org mode:

#+BEGIN_SRC emacs-lisp
;; 22Sep2016
;; Make windmove work in org-mode:
(setq org-support-shift-select t)
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp)
#+END_SRC

* ELPA packages
** ace-window
[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  ;; (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (ace-window-display-mode)
  :bind ("C-x o" . ace-window))
#+END_SRC

** ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :commands ag)
#+END_SRC

** auctex
*** basic setup
Enable [[https://www.gnu.org/software/auctex/manual/auctex.html][Auctex]] when files with .tex are loaded. Tex-master is useful to make
Auctex aware of multi-files documents.  TeX-PDF mode is used to compile using
pdflatex.

#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (reftex-mode)
              (latex-extra-mode)
              (magic-latex-buffer)
              (LaTeX-math-mode)
              (rainbow-delimiters-mode)
              (flyspell-mode)
              (company-mode)
              (smartparens-mode)
              (turn-on-reftex)
              (setq reftex-plug-into-AUCTeX t)
              (reftex-isearch-minor-mode)
              (setq TeX-PDF-mode t)
              (setq global-font-lock-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-source-correlate-start-server t)))

  ;; https://github.com/politza/pdf-tools/issues/187
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;; to use pdfview with auctex
  (add-hook 'LaTeX-mode-hook 'pdf-tools-install)
  ;; nil beacuse I don't want the pdf to be opened again in the same frame after
  ;; C-c C-a
  ;; (setq TeX-view-program-selection nil)
  ;; (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
  ;; (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))

  ;; https://github.com/politza/pdf-tools/pull/60
  (setq pdf-sync-forward-display-action
        '(display-buffer-reuse-window (reusable-frames . t)))
  ;; same thing, now I can jump from pdf in another frame into source
  (setq pdf-sync-backward-display-action
        '(display-buffer-reuse-window (reusable-frames . t)))

  ;; language specific hooks in auctex
  (add-hook 'TeX-language-dk-hook
            (lambda () (ispell-change-dictionary "english"))))
#+END_SRC

*** company-auctex
From [[https://github.com/manugoyal/.emacs.d#latex][here]].

#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :defer t
  :config
  (company-auctex-init))
#+END_SRC

*** CANCELLED latex-preview-pane
CLOSED: [2017-07-03 Mon 16:47]
shell-escape mode because the pacakge svg requires it.

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :disabled t
  :bind ("M-p" . latex-preview-pane-mode)
  :config
  (setq doc-view-ghostscript-program "gswin64c")

  (custom-set-variables
   '(shell-escape-mode "-shell-escape")
   '(latex-preview-pane-multifile-mode (quote auctex))))
#+END_SRC

** company
Auto complete.

The configurations were taken from [[https://github.com/company-mode/company-mode/issues/68][this discussion]].  The delay time from the
wiki. This [[https://www.reddit.com/r/emacs/comments/3s5bkf/companymode_configuration_make_editing_slow/][reddit thread]] has some cool configurations.  [[https://github.com/manugoyal/.emacs.d#company-mode][Company capf is
problematic?]]

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :defer t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-idle-delay 0)
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 3)
  (delete 'company-capf company-backends))
#+END_SRC

** dired-hacks
Collection of useful dired additions.

***** dired-open
#+BEGIN_SRC emacs-lisp
(use-package dired-open
  :ensure t
  :defer t)
#+END_SRC

***** dired-rainbow
#+BEGIN_SRC emacs-lisp
(use-package dired-rainbow
  :ensure t
  :defer t)
#+END_SRC

***** dired-ranger
#+BEGIN_SRC emacs-lisp
(use-package dired-ranger
  :ensure t
  :defer t)
#+END_SRC

***** dired-narrow
#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :ensure t
  :defer t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+END_SRC

** ess (emacs speaks statistics)
#+BEGIN_SRC emacs-lisp
(use-package ess
  :defer t
  :mode (("\\.sp\\'"           . S-mode)
         ("/R/.*\\.q\\'"       . R-mode)
         ("\\.[qsS]\\'"        . S-mode)
         ("\\.ssc\\'"          . S-mode)
         ("\\.SSC\\'"          . S-mode)
         ("\\.[rR]\\'"         . R-mode)
         ("\\.[rR]nw\\'"       . Rnw-mode)
         ("\\.[sS]nw\\'"       . Snw-mode)
         ("\\.[rR]profile\\'"  . R-mode)
         ("NAMESPACE\\'"       . R-mode)
         ("CITATION\\'"        . R-mode)
         ("\\.omg\\'"          . omegahat-mode)
         ("\\.hat\\'"          . omegahat-mode)
         ("\\.lsp\\'"          . XLS-mode)
         ("\\.do\\'"           . STA-mode)
         ("\\.ado\\'"          . STA-mode)
         ("\\.[Ss][Aa][Ss]\\'" . SAS-mode)
         ("\\.jl\\'"           . ess-julia-mode)
         ("\\.[Ss]t\\'"        . S-transcript-mode)
         ("\\.Sout"            . S-transcript-mode)
         ("\\.[Rr]out"         . R-transcript-mode)
         ("\\.Rd\\'"           . Rd-mode)
         ("\\.[Bb][Uu][Gg]\\'" . ess-bugs-mode)
         ("\\.[Bb][Oo][Gg]\\'" . ess-bugs-mode)
         ("\\.[Bb][Mm][Dd]\\'" . ess-bugs-mode)
         ("\\.[Jj][Aa][Gg]\\'" . ess-jags-mode)
         ("\\.[Jj][Oo][Gg]\\'" . ess-jags-mode)
         ("\\.[Jj][Mm][Dd]\\'" . ess-jags-mode))
  :config
  (require 'ess-site)
  (progn
    (add-hook 'ess-mode-hook 'company-mode)
    ;; (add-hook 'ess-mode-hook 'ess-smart-equals-mode)
    ;; (add-hook 'inferior-ess-mode-hook 'ess-smart-equals-mode)
    (add-hook 'ess-mode-hook 'turn-on-orgstruct)
    ;; (add-hook 'ess-mode-hook 'smartparens-mode)
    ;; (add-hook 'ess-mode-hook 'smartparens-strict-mode)
    ;; (add-hook 'ess-R-post-run-hook 'smartparens-mode)
    ;; (add-hook 'ess-R-post-run-hook 'smartparens-strict-mode)
    (add-hook 'inferior-ess-mode-hook 'smartparens-mode)
    (add-hook 'inferior-ess-mode-hook 'smartparens-strict-mode)
    (with-eval-after-load 'ess-site
      ;; 15Nov2016
      ;; https://media.readthedocs.org/pdf/emacs/latest/emacs.pdf (p.24)
      ;; (setq ess-eval-visibly-p 'nowait)
      ;; Follow Hadley Wickham's R style guide
      (setq ess-first-continued-statement-offset 2
            ess-continued-statement-offset 0
            ess-expression-offset 2
            ess-nuke-trailing-whitespace-p t
            ess-default-style 'DEFAULT)))
  :bind
  (:map comint-mode-map
        ("C-c M-r" . comint-history-isearch-backward-regexp)))
#+END_SRC

** hungry-delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :diminish hungry-delete
  :config
  (global-hungry-delete-mode)
  (global-set-key (kbd "C-<delete>") 'hungry-delete-forward)
  (global-set-key (kbd "C-<backspace>") 'hungry-delete-backward))
#+END_SRC

** ibuffer-vc
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc
  :diminish ibuffer-vc
  :defer t
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
  (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :diminish ido-vertical-mode
  :config
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC

** latex-extra
Defines extra commands and keys for LaTeX mode.

#+BEGIN_SRC emacs-lisp
(use-package latex-extra
  :defer t)
#+END_SRC

** limum-relative
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :defer t)
#+END_SRC

** magic-latex-buffer
Magically enhance LaTeX-mode font-locking for semi-WYSIWYG editing.

#+BEGIN_SRC emacs-lisp
(use-package magic-latex-buffer
  :config
  (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
  (setq magic-latex-enable-block-highlight t
        magic-latex-enable-suscript        nil
        magic-latex-enable-pretty-symbols  t
        magic-latex-enable-block-align     nil
        magic-latex-enable-inline-image    nil))
#+END_SRC

** markdown-mode
Taken from [[http://jblevins.org/projects/markdown-mode/][here]], on 09Jan2017.
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.[Rr]md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

** move-text
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :defer t
  :config
  (move-text-default-bindings))
#+END_SRC

** page-break-lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t
  :defer t)
(global-page-break-lines-mode)
#+END_SRC

** pdf-tools
From the larslj's [[https://github.com/larslj/pdf-tools/tree/windows][windows branch]].

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode ("ont\\.pdf\\'" . pdf-tools-install)
  :bind ("C-c C-g" . pdf-sync-forward-search)
  :defer t
  :config
  (setq mouse-wheel-follow-mouse t)
  (setq pdf-view-resize-factor 1.10)
  ;; 28Nov2016
  ;; From:
  ;; https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx
  (if (string-equal system-type "darwin")
      (custom-set-variables
       '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
  (pdf-tools-install))
#+END_SRC

** peep-dired
Taken from [[http://pragmaticemacs.com/emacs/quickly-preview-images-and-other-files-with-peep-dired/][here]].
#+BEGIN_SRC emacs-lisp
;; preview files in dired
(use-package peep-dired
  :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
  :bind (:map dired-mode-map
              ("P" . peep-dired)))
#+END_SRC

** polymode
Taken from [[https://github.com/basille/.emacs.d/blob/master/init.el][here,]] on 09Jan2017.

#+BEGIN_SRC emacs-lisp
;; Polymode to load several modes (e.g. Markdown + ESS)
;; https://github.com/vitoshka/polymode
(use-package polymode
  :mode (("\\.md"     . poly-markdown-mode)   ; Markdown files
         ("\\.[rR]md" . poly-markdown+r-mode) ; RMarkdown files
         ("\\.[sSrR]nw" . poly-noweb+r-mode)) ; Sweave files
  :diminish poly-markdown+r-mode
  :init
  (progn
    ;; (setq load-path          ; Append the directory to emacs path
    ;;       (append '("/home/mathieu/.emacs.d/polymode/"
    ;;          "/home/mathieu/.emacs.d/polymode/modes") load-path))
    (require 'poly-R)                   ; Load necessary modes
    (require 'poly-markdown)
    (require 'poly-noweb)
    (setq
     pm-weaver "knitR-ESS"              ; Default weaver
     pm-exporter "pandoc")              ; Default exporter
    (bind-keys :map polymode-mode-map
               ([(C-prior)] . polymode-previous-chunk) ; C-PageUp to move to the previous chunk (code or comment)
               ([(C-next)] . polymode-next-chunk)      ; C-PageDown to move to the next chunk (code or comment)
               ([(C-S-prior)] . polymode-previous-chunk-same-type) ; C-S-PageUp to move to the previous chunk of the same type
               ([(C-S-next)] . polymode-next-chunk-same-type)      ; C-S-PageDown to move to the next chunk of the same type
               ([(f8)] . polymode-weave)       ; F7 to weave
               ([(C-f8)] . polymode-export)))) ; C-F7 to export
#+END_SRC

** reftex
[[http://www.gnu.org/software/auctex/manual/reftex.html#SEC2][RefTex website]].  Useful for managing cross references, bibliographies, indices,
and document navigation.

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :defer t
  :config
  (setq reftex-cite-prompt-optional-args t)); Prompt for empty
                                        ; optional arguments in
                                        ; cite
#+END_SRC

** swiper
***** counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-h v" . counsel-describe-variable)
         ("C-h f" . counsel-describe-function))
  :config
  (use-package flx)
  ;; miz fuzzy with plus (.* for each space)
  ;; http://oremacs.com/2016/01/06/ivy-flx/
  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil))
#+END_SRC

***** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (progn
    (global-set-key (kbd "C-c C-r") 'ivy-resume)))
#+END_SRC

***** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper)
         ("C-c u" . swiper-all)))
#+END_SRC

***** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :defer t)
#+END_SRC

** smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :init
  (progn
    (setq sml/no-confirmation-load-theme t)
    (sml/setup)
    (sml/apply-theme 'automatic)))
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :defer t
  :diminish smartparens-mode
  :config
  (smartparens-global-mode)
  (show-smartparens-global-mode t)
  (sp-local-pair 'org-mode "_" "_" )
  (sp-local-pair 'org-mode "*" "*" )
  (sp-local-pair 'latex-mode "$" "$" )
  (sp-local-pair 'latex-mode "\\left(" "\\right)" :trigger "\\l("))
#+END_SRC

** zotelo
#+BEGIN_SRC emacs-lisp
;;; zotelo (Zotero-Local)
;; https://github.com/vitoshka/zotelo
;; https://forums.zotero.org/discussion/19608/zotero-emacs-integration/
(use-package zotelo
  :demand t
  :commands (zotelo-set-collection
             zotelo-update-database)
  :config
  (setq zotelo-use-ido nil)
  (add-hook 'TeX-mode-hook 'zotelo-minor-mode)
  (add-hook 'org-mode-hook 'zotelo-minor-mode)
  ;; C-c z c         zotelo-set-collection (also C-c z s)
  ;; C-c z u         zotelo-update-database
  ;; C-c z e         zotelo-export-secondary
  ;; C-c z r         zotelo-reset
  ;; C-c z t         zotelo-set-translator
  )
#+END_SRC

** writegood-mode
From [[https://github.com/grettke/help/blob/master/help.org][this source]].

#+BEGIN_SRC emacs-lisp :tangle no
(use-package writegood-mode
  :config
  (require 'writegood-mode)
  (eval-after-load "writegood-mode"
    '(diminish 'writegood-mode)))
#+END_SRC

* Misc
** Dired Stuff
#+BEGIN_SRC emacs-lisp
;; dired sorts directories first from
;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst 03Oct2012
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
    (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding mark."
  (mydired-sort))
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

This code snippet taken from [[http://oremacs.com/2016/02/24/dired-rsync/][here]] on 20Feb2017 allows for the asynchronous use
of rsync within dired.

#+BEGIN_SRC emacs-lisp
(defun ora-dired-rsync (dest)
  (interactive
   (list
    (expand-file-name
     (read-file-name
      "Rsync to:"
      (dired-dwim-target-directory)))))
  ;; store all selected files into "files" list
  (let ((files (dired-get-marked-files
                nil current-prefix-arg))
        ;; the rsync command
        (tmtxt/rsync-command
         "rsync -arvz --progress "))
    ;; add all selected file names as arguments
    ;; to the rsync command
    (dolist (file files)
      (setq tmtxt/rsync-command
            (concat tmtxt/rsync-command
                    (shell-quote-argument file)
                    " ")))
    ;; append the destination
    (setq tmtxt/rsync-command
          (concat tmtxt/rsync-command
                  (shell-quote-argument dest)))
    ;; run the async shell command
    (async-shell-command tmtxt/rsync-command "*rsync*")
    ;; finally, switch to that window
    (other-window 1)))

(define-key dired-mode-map "Y" 'ora-dired-rsync)
#+END_SRC

** Eshell
This snippet was taken from [[https://github.com/grettke/help/blob/master/help.org#eshell][here]], on 10Feb2017.  According to Grant Rettke's
notes:

Provide a cross-platform command line shell that is a first-class EMACS citizen.

Commands input in eshell are delegated in order to an alias, a built in command,
an Elisp function with the same name, and finally to a system call.  Semicolons
separate commands.  ~which~ tells you what implementation will satisfy the call
that you are going to make.  The flag ~eshell-prefer-lisp-functions~ does what
it says.  ~$$~ is the result of the last command.  Aliases live in
~eshell-aliases-file~.  History is maintained and expandable.
~eshell-source-file~ will run scripts.  Since Eshell is not a terminal emulator,
you need to configure it for any commands that need to run using a terminal
emulator by adding it to ~eshell-visual-commands~.

#+BEGIN_SRC emacs-lisp
(setq eshell-prefer-lisp-functions nil
      eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\~\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

;; 13Feb2017: depends on three packages not available on melpa
;; (eval-after-load "esh-opt"
;;   '(progn
;;      (use-package em-cmpl)
;;      (use-package em-prompt)
;;      (use-package em-term)
;;      (setenv "PAGER" "cat")
;;      (add-hook 'eshell-mode-hook
;;                (lambda ()
;;                  (message "Welcome to Eshell.")
;;                  (setq pcomplete-cycle-completions nil)))
;;      (add-to-list 'eshell-visual-commands "ssh")
;;      (add-to-list 'eshell-visual-commands "tail")
;;      (add-to-list 'eshell-command-completions-alist
;;                   '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))))
#+END_SRC

Defines eshell aliases.

#+BEGIN_SRC emacs-lisp
(defalias 'ff 'find-file)
(defalias 'd 'dired)
#+END_SRC

Configure a ~PS1~ like prompt.

#+BEGIN_SRC emacs-lisp
(setq eshell-prompt-regexp "^.+@.+:.+> ")
(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "┌─[" 'face `(:foreground "grey50"))
         (propertize (user-login-name) 'face `(:foreground "tomato"))
         (propertize "@" 'face `(:foreground "grey50"))
         (propertize (system-name) 'face `(:foreground "RoyalBlue"))
         (propertize "]──[" 'face `(:foreground "grey50"))
         (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "DarkOrange"))
         (propertize "]──[" 'face `(:foreground "grey50"))
         (propertize (concat (eshell/pwd)) 'face `(:foreground "bisque"))
         (propertize "]\n" 'face `(:foreground "grey50"))
         (propertize "└─>" 'face `(:foreground "grey50"))
         (propertize (if (= (user-uid) 0) " # " " $ "))
         )))
#+END_SRC

** IBuffer
#+BEGIN_SRC emacs-lisp
;; see http://www.emacswiki.org/emacs/IbufferMode
;; 30Jul2014
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;; Modify the default ibuffer-formats
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)))

;; From ibuffer-vc.el
(add-hook 'ibuffer-hook
          (lambda ()
            (ibuffer-vc-set-filter-groups-by-vc-root)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; turn off ibuffer-show-empty-filter-groups
;; From http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
** Minibuffer
Minibuffer window expands vertically as necessary to hold the text that you put
in the minibuffer

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t) ;; was grow-only
#+END_SRC

** Mode Line
From [[https://www.emacswiki.org/emacs/ModeLineConfiguration][EmacsWiki]].
Taken on [2017-07-05 Wed]

#+BEGIN_SRC emacs-lisp
(setq line-number-mode nil)
;; (setq column-number-mode nil)
(setq size-indication-mode nil)
(setq display-time-day-and-date t)
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC

** Shell
What's new in 25.1, from Mickey Petersen's [[https://www.masteringemacs.org/article/whats-new-in-emacs-25-1][masteringemacs.org]] blog:

When you invoke 'shell' interactively, the '*shell*' buffer will now
display in a new window.  However, you can customize this behavior via
the 'display-buffer-alist' variable.  For example, to get
the old behavior -- '*shell*' buffer displays in current window -- use

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             '("^\\*shell\\*$" . (display-buffer-same-window)))
#+END_SRC

* Temporary
*** ido-prelude fix [2017-07-13 Thu]

This snippet of code is a temporary fix to acknowledge the replacement of
~ido-ubiquitous~ by ~ido-completing-read+~ in ~modules/prelude-ido.el~.

~ido-prelude~ is temporarily switched off until a fix is deployed on the master
branch and this code will work as a replacement until then.  Most of this code
is taken from ~modules/prelude-ido.el~.
***** ido
#+BEGIN_SRC emacs-lisp
(use-package ido
  :ensure t
  :config
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10
        ido-save-directory-list-file (expand-file-name "ido.hist" prelude-savefile-dir)
        ido-default-file-method 'selected-window
        ido-auto-merge-work-directories-length -1)
  (ido-mode +1))
#+END_SRC

***** flx-ido
#+BEGIN_SRC emacs-lisp
(use-package flx-ido
  :ensure t
  :config
  ;; smarter fuzzy matching for ido
  (flx-ido-mode +1)
  ;; disable ido faces to see flx highlights
  (setq ido-use-faces nil))
#+END_SRC

***** smex
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config
  (setq smex-save-file (expand-file-name ".smex-items" prelude-savefile-dir))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands))
#+END_SRC

***** ido-completing-read+
#+BEGIN_SRC  emacs-lisp
(use-package ido-completing-read+
  :ensure t
  :config
  (ido-ubiquitous-mode 1)
  (setq magit-completing-read-function 'magit-ido-completing-read)
  (setq gnus-completing-read-function 'gnus-ido-completing-read)
  (setq ess-use-ido t)
  (require 'icomplete)
  (icomplete-mode 1))
#+END_SRC
